@page "/incomes"
@using ExpenseTracker.Shared
@using ExpenseTracker.Client.Services

@inject IIncomeService IncomeService
@inject IJSRuntime JSRuntime

<h3 class="mb-4">Income Tracker</h3>

<div class="mb-3">
	<button class="btn btn-primary" @onclick="() => ShowFormForNewIncome()">Add New Income</button>
	<a class="btn btn-outline-secondary ms-2" href="api/incomes/export/csv">Export CSV</a>
</div>

@if (showForm)
{
	<EditForm Model="income" OnValidSubmit="HandleValidSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="mb-3">
			<label class="form-label">Title</label>
			<InputText @bind-Value="income.Title" class="form-control" />
		</div>

		<div class="mb-3">
			<label class="form-label">Amount</label>
			<InputNumber @bind-Value="income.Amount" class="form-control" />
		</div>

		<div class="mb-3">
			<label class="form-label">Date</label>
			<InputDate @bind-Value="income.Date" class="form-control" />
		</div>

		<div class="mb-3">
			<label class="form-label">Source</label>
			<InputText @bind-Value="income.Source" class="form-control" />
		</div>

		<div class="mb-3">
			<label class="form-label">Notes</label>
			<InputTextArea @bind-Value="income.Notes" class="form-control" />
		</div>

		<button type="submit" class="btn btn-primary me-2">Save</button>
		<button type="button" class="btn btn-secondary" @onclick="() => { showForm = false; income = new Income(); }">Cancel</button>
	</EditForm>
}

<div class="mt-4">
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th>Title</th>
				<th>Amount</th>
				<th>Date</th>
				<th>Source</th>
				<th>Notes</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var inc in incomes)
			{
				<tr>
					<td>@inc.Title</td>
					<td>@(inc.Amount.HasValue? inc.Amount.Value.ToString("C") : "")</td>
					<td>@(inc.Date.HasValue? inc.Date.Value.ToShortDateString() : "")</td>
					<td>@inc.Source</td>
					<td>@inc.Notes</td>
					<td>
						<button class="btn btn-sm btn-danger me-2" @onclick="() => DeleteIncome(inc.Id)">Delete</button>
						<button class="btn btn-sm btn-secondary" @onclick="() => EditIncome(inc)">Edit</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>

@code {
	private List<Income> incomes = new();
	private Income income = new();
	private bool showForm = false;

	protected override async Task OnInitializedAsync()
	{
		await LoadIncomes();
	}

	private async Task LoadIncomes()
	{
		incomes = (await IncomeService.GetIncomesAsync()).ToList();
		StateHasChanged();
	}

	private void ShowFormForNewIncome()
	{
		income = new Income();
		showForm = true;
	}

	private void EditIncome(Income inc)
	{
		income = new Income
		{
			Id = inc.Id,
			Title = inc.Title,
			Amount = inc.Amount,
			Date = inc.Date,
			Source = inc.Source,
			Notes = inc.Notes
		};
		showForm = true;
	}

	private async Task DeleteIncome(Guid id)
	{
		if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this income?"))
		{
			await IncomeService.DeleteIncomeAsync(id);
			await LoadIncomes();
		}
	}

	private async Task HandleValidSubmit()
	{
		if (income.Id == Guid.Empty)
		{
			income.Id = Guid.NewGuid();
			await IncomeService.AddIncomeAsync(income);
		}
		else
		{
			await IncomeService.UpdateIncomeAsync(income);
		}
		showForm = false;
		income = new Income();
		await LoadIncomes();
	}
}

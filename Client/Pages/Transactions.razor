@page "/transactions"
@using ExpenseTracker.Shared
@using ExpenseTracker.Client.Services

@inject IExpenseService ExpenseService
@inject IIncomeService IncomeService
@inject IJSRuntime JSRuntime

<h3 class="mb-4">Transactions</h3>

<div class="row g-3 align-items-end mb-3">
    <div class="col-sm-3">
		<label class="form-label">Type</label>
		<select class="form-select" @bind="transactionType">
			<option value="Income">Income</option>
			<option value="Expense">Expense</option>
		</select>
	</div>
	<div class="col-sm-9 text-end">
		<a class="btn btn-outline-primary me-2" href="api/reports/transactions/csv">Export All (CSV)</a>
		@if (transactionType == "Income")
		{
			<a class="btn btn-outline-secondary" href="api/incomes/export/csv">Export Incomes CSV</a>
		}
		else
		{
			<a class="btn btn-outline-secondary" href="api/expenses/export/csv">Export Expenses CSV</a>
		}
	</div>
</div>

<div class="card mb-4">
    <div class="card-body">
        <EditForm Model="formModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Title</label>
                    <InputText @bind-Value="formModel.Title" class="form-control" placeholder="e.g. Salary or Groceries" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Amount</label>
                    <div class="input-group">
                        <span class="input-group-text">RWF</span>
                        <InputNumber @bind-Value="formModel.Amount" class="form-control" />
                    </div>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Date</label>
                    <InputDate @bind-Value="formModel.Date" class="form-control" />
                </div>
            </div>

            <div class="row g-3 mt-1">
                @if (transactionType == "Income")
                {
                    <div class="col-md-6">
                        <label class="form-label">Source</label>
                        <InputText @bind-Value="incomeSource" class="form-control" placeholder="e.g. Job, Freelance" />
                    </div>
                }
                else
                {
                    <div class="col-md-6">
                        <label class="form-label">Category</label>
                        <InputText @bind-Value="expenseCategory" class="form-control" disabled="@(!hasAnyIncome)" placeholder="e.g. Food, Rent" />
                    </div>
                }
                <div class="col-md-6">
                    <label class="form-label">Notes</label>
                    <InputTextArea @bind-Value="notes" class="form-control" placeholder="Optional details" />
                </div>
            </div>

            <div class="mt-3">
                <button class="btn btn-primary" type="submit" disabled="@(!CanSubmit)">Save</button>
                <button class="btn btn-secondary ms-2" type="button" @onclick="ResetForm">Cancel</button>
            </div>
        </EditForm>
    </div>
    <div class="card-footer text-muted small">
        Tip: Add at least one income before adding expenses. Export CSV from the top-right.
    </div>
    
</div>

<hr class="my-4" />

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <table class="table table-striped table-hover align-middle">
			<thead>
				<tr>
					<th>Type</th>
					<th>Title</th>
					<th>Amount</th>
					<th>Date</th>
					<th>Category/Source</th>
					<th>Notes</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var row in combined)
				{
					<tr>
                        <td>
                            @if (row.Type == "Income")
                            {
                                <span class="badge bg-success">Income</span>
                            }
                            else
                            {
                                <span class="badge" style="background-color:#ff7a00;color:#0b0b0f;">Expense</span>
                            }
                        </td>
						<td>@row.Title</td>
                        <td>RWF @row.Amount.ToString("N0")</td>
						<td>@row.Date.ToShortDateString()</td>
						<td>@row.CategoryOrSource</td>
						<td>@row.Notes</td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-delete me-2" title="Delete" @onclick="() => DeleteRow(row)">
                                <span class="bi bi-trash"></span> Delete
                            </button>
                            <button class="btn btn-sm btn-edit" title="Edit" @onclick="() => EditRow(row)">
                                <span class="bi bi-pencil"></span> Edit
                            </button>
                        </td>
					</tr>
				}
			</tbody>
                </table>
            </div>
        </div>
	</div>
</div>

@code {
	private string transactionType = "Income";
	private RecordModel formModel = new();
	private string? incomeSource;
	private string? expenseCategory;
	private string? notes;

    private List<RowModel> combined = new();
	private List<Income> incomes = new();
	private List<Expense> expenses = new();
    private bool hasAnyIncome => incomes.Any();
    private bool CanSubmit => transactionType == "Income" || hasAnyIncome;
    private string? errorMessage;

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private async Task LoadData()
	{
        incomes = (await IncomeService.GetIncomesAsync()).ToList();
		expenses = (await ExpenseService.GetExpensesAsync()).ToList();
		combined = incomes.Select(i => new RowModel
		{
			Type = "Income",
			Id = i.Id,
			Title = i.Title ?? string.Empty,
			Amount = i.Amount ?? 0,
			Date = i.Date ?? DateTime.UtcNow,
			CategoryOrSource = i.Source,
			Notes = i.Notes
		}).Concat(expenses.Select(e => new RowModel
		{
			Type = "Expense",
			Id = e.Id,
			Title = e.Title ?? string.Empty,
			Amount = e.Amount ?? 0,
			Date = e.Date ?? DateTime.UtcNow,
			CategoryOrSource = e.Category,
			Notes = e.Notes
		}))
		.OrderByDescending(r => r.Date)
		.ToList();
	}

    private async Task HandleSubmit()
	{
		if (transactionType == "Income")
		{
			var inc = new Income
			{
				Id = formModel.Id == Guid.Empty ? Guid.NewGuid() : formModel.Id,
				Title = formModel.Title,
				Amount = formModel.Amount,
				Date = formModel.Date,
				Source = incomeSource,
				Notes = notes
			};
			if (formModel.Id == Guid.Empty)
				await IncomeService.AddIncomeAsync(inc);
			else
				await IncomeService.UpdateIncomeAsync(inc);
		}
		else
		{
            // Client-side validation: prevent expense exceeding total income
            var totalIncome = incomes.Sum(i => i.Amount ?? 0);
            var totalOtherExpenses = expenses.Where(e => e.Id != formModel.Id).Sum(e => e.Amount ?? 0);
            var proposed = totalOtherExpenses + (formModel.Amount ?? 0);
            if (proposed > totalIncome)
            {
                errorMessage = "Expense exceeds total income. Please add more income first or reduce the amount.";
                return;
            }
			var exp = new Expense
			{
				Id = formModel.Id == Guid.Empty ? Guid.NewGuid() : formModel.Id,
				Title = formModel.Title,
				Amount = formModel.Amount,
				Date = formModel.Date,
				Category = expenseCategory,
				Notes = notes
			};
			if (formModel.Id == Guid.Empty)
				await ExpenseService.AddExpenseAsync(exp);
			else
				await ExpenseService.UpdateExpenseAsync(exp);
		}

        errorMessage = null;
        ResetForm();
		await LoadData();
	}

	private async Task DeleteRow(RowModel row)
	{
		if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Delete {row.Type} '{row.Title}'?")) return;
		if (row.Type == "Income")
			await IncomeService.DeleteIncomeAsync(row.Id);
		else
			await ExpenseService.DeleteExpenseAsync(row.Id);
		await LoadData();
	}

	private void EditRow(RowModel row)
	{
		transactionType = row.Type;
		formModel = new RecordModel
		{
			Id = row.Id,
			Title = row.Title,
			Amount = row.Amount,
			Date = row.Date
		};
		incomeSource = row.Type == "Income" ? row.CategoryOrSource : null;
		expenseCategory = row.Type == "Expense" ? row.CategoryOrSource : null;
		notes = row.Notes;
	}

	private void ResetForm()
	{
		transactionType = "Income";
		formModel = new RecordModel();
		incomeSource = null;
		expenseCategory = null;
		notes = null;
	}

	private class RecordModel
	{
		public Guid Id { get; set; }
		public string? Title { get; set; }
		public decimal? Amount { get; set; }
		public DateTime? Date { get; set; } = DateTime.UtcNow;
	}

	private class RowModel
	{
		public string Type { get; set; } = string.Empty;
		public Guid Id { get; set; }
		public string Title { get; set; } = string.Empty;
		public decimal Amount { get; set; }
		public DateTime Date { get; set; }
		public string? CategoryOrSource { get; set; }
		public string? Notes { get; set; }
	}
}
